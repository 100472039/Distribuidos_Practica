/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _RPC_SERVICE_H_RPCGEN
#define _RPC_SERVICE_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif


struct register_1_argument {
	char *arg1;
	char *arg2;
	char *arg3;
};
typedef struct register_1_argument register_1_argument;

struct unregister_1_argument {
	char *arg1;
	char *arg2;
	char *arg3;
};
typedef struct unregister_1_argument unregister_1_argument;

struct connect_1_argument {
	char *arg1;
	char *arg2;
	char *arg3;
};
typedef struct connect_1_argument connect_1_argument;

struct disconnect_1_argument {
	char *arg1;
	char *arg2;
	char *arg3;
};
typedef struct disconnect_1_argument disconnect_1_argument;

struct publish_1_argument {
	char *arg1;
	char *arg2;
	char *arg3;
	char *arg4;
};
typedef struct publish_1_argument publish_1_argument;

struct delete_1_argument {
	char *arg1;
	char *arg2;
	char *arg3;
	char *arg4;
};
typedef struct delete_1_argument delete_1_argument;

struct list_users_1_argument {
	char *arg1;
	char *arg2;
	char *arg3;
};
typedef struct list_users_1_argument list_users_1_argument;

struct list_content_1_argument {
	char *arg1;
	char *arg2;
	char *arg3;
};
typedef struct list_content_1_argument list_content_1_argument;

#define SERVER 0x31230000
#define SERVER_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define REGISTER 1
extern  enum clnt_stat register_1(char *, char *, char *, int *, CLIENT *);
extern  bool_t register_1_svc(char *, char *, char *, int *, struct svc_req *);
#define UNREGISTER 2
extern  enum clnt_stat unregister_1(char *, char *, char *, int *, CLIENT *);
extern  bool_t unregister_1_svc(char *, char *, char *, int *, struct svc_req *);
#define CONNECT 3
extern  enum clnt_stat connect_1(char *, char *, char *, int *, CLIENT *);
extern  bool_t connect_1_svc(char *, char *, char *, int *, struct svc_req *);
#define DISCONNECT 4
extern  enum clnt_stat disconnect_1(char *, char *, char *, int *, CLIENT *);
extern  bool_t disconnect_1_svc(char *, char *, char *, int *, struct svc_req *);
#define PUBLISH 5
extern  enum clnt_stat publish_1(char *, char *, char *, char *, int *, CLIENT *);
extern  bool_t publish_1_svc(char *, char *, char *, char *, int *, struct svc_req *);
#define DELETE 6
extern  enum clnt_stat delete_1(char *, char *, char *, char *, int *, CLIENT *);
extern  bool_t delete_1_svc(char *, char *, char *, char *, int *, struct svc_req *);
#define LIST_USERS 7
extern  enum clnt_stat list_users_1(char *, char *, char *, int *, CLIENT *);
extern  bool_t list_users_1_svc(char *, char *, char *, int *, struct svc_req *);
#define LIST_CONTENT 8
extern  enum clnt_stat list_content_1(char *, char *, char *, int *, CLIENT *);
extern  bool_t list_content_1_svc(char *, char *, char *, int *, struct svc_req *);
extern int server_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define REGISTER 1
extern  enum clnt_stat register_1();
extern  bool_t register_1_svc();
#define UNREGISTER 2
extern  enum clnt_stat unregister_1();
extern  bool_t unregister_1_svc();
#define CONNECT 3
extern  enum clnt_stat connect_1();
extern  bool_t connect_1_svc();
#define DISCONNECT 4
extern  enum clnt_stat disconnect_1();
extern  bool_t disconnect_1_svc();
#define PUBLISH 5
extern  enum clnt_stat publish_1();
extern  bool_t publish_1_svc();
#define DELETE 6
extern  enum clnt_stat delete_1();
extern  bool_t delete_1_svc();
#define LIST_USERS 7
extern  enum clnt_stat list_users_1();
extern  bool_t list_users_1_svc();
#define LIST_CONTENT 8
extern  enum clnt_stat list_content_1();
extern  bool_t list_content_1_svc();
extern int server_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_register_1_argument (XDR *, register_1_argument*);
extern  bool_t xdr_unregister_1_argument (XDR *, unregister_1_argument*);
extern  bool_t xdr_connect_1_argument (XDR *, connect_1_argument*);
extern  bool_t xdr_disconnect_1_argument (XDR *, disconnect_1_argument*);
extern  bool_t xdr_publish_1_argument (XDR *, publish_1_argument*);
extern  bool_t xdr_delete_1_argument (XDR *, delete_1_argument*);
extern  bool_t xdr_list_users_1_argument (XDR *, list_users_1_argument*);
extern  bool_t xdr_list_content_1_argument (XDR *, list_content_1_argument*);

#else /* K&R C */
extern bool_t xdr_register_1_argument ();
extern bool_t xdr_unregister_1_argument ();
extern bool_t xdr_connect_1_argument ();
extern bool_t xdr_disconnect_1_argument ();
extern bool_t xdr_publish_1_argument ();
extern bool_t xdr_delete_1_argument ();
extern bool_t xdr_list_users_1_argument ();
extern bool_t xdr_list_content_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_RPC_SERVICE_H_RPCGEN */
